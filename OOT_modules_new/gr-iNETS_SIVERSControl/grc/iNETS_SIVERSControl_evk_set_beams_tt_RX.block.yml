id: iNETS_SIVERSControl_evk_set_beams_tt_RX
label: Set Beams and TT for EVK - RX
category: '[iNETS_SIVERSControl]'

templates:
  imports: from gnuradio import iNETS_SIVERSControl
  make: iNETS_SIVERSControl.evk_set_beams_tt_RX(${evkplatform_type}, ${time_per_angle}, ${beam_indices}, ${sps}, ${use_spi})

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#     * default
parameters:
- id: evkplatform_type
  label: Evkplatform Type
  dtype: string
  default: MB1
- id: time_per_angle
  label: Time per Angle
  dtype: float
  default: 60
- id: beam_indices
  label: Beam Indices [0, 21 or 42] 
  dtype: string
  default: 0
- id: sps
  label: SPS
  dtype: int
  default: "sps"
- id: use_spi
  label: Use SPI
  dtype: bool
  options: ["True", "False"]
  option_labels: ["Yes", "No"]

#- id: ...
#  label: ...
#  dtype: ...

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
- label: in
#  domain: ...
  dtype: complex
#  vlen: ...
#  optional: ...
- label: spi_manager_in
  domain: message
  optional: 1

outputs:
- label: out
#  domain: ...
  dtype: complex
#  vlen: ...
#  optional: ...
- label: spi_manager_out
  domain: message
  optional: 1

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
