/*
 * Copyright 2024 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(packet_header_parser.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(36c5a98d333cffbd815102ad80d6a5f3)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/iNETS_PacketizedLink/packet_header_parser.h>
// pydoc.h is automatically generated in the build directory
#include <packet_header_parser_pydoc.h>

void bind_packet_header_parser(py::module& m)
{

    using packet_header_parser    = ::gr::iNETS_PacketizedLink::packet_header_parser;


    py::class_<packet_header_parser,
               gr::sync_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<packet_header_parser>>(
        m, "packet_header_parser", D(packet_header_parser))

        .def(py::init((std::shared_ptr<packet_header_parser>(*)(const gr::digital::packet_header_default::sptr&,
                                                                bool)) &
                       packet_header_parser::make),
             py::arg("header_formatter"),
             py::arg("print_warnings"),
             D(packet_header_parser, make))

        .def(py::init((std::shared_ptr<packet_header_parser>(*)(long,
                                                                const std::string&)) &
                       packet_header_parser::make),
             py::arg("header_len"),
             py::arg("len_tag_key"),
             D(packet_header_parser, make))

        ;
}
