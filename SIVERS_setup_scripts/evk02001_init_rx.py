#!/usr/bin/env python
# -*- coding: utf-8 -*-
# 
# Copyright 2019 iNETS, RWTH Aachen University.
# Author: Florian Wischeler
# Modified by Berk Acikgoez, 2024.
#
# SPDX-License-Identifier: GPL-3.0-or-later
#

import cruijff
import time

# verify the desired values
trx_frequency = 27.44e9
initial_RX_BF_RF_gain = 0x11 # 0xFF is the highest
initial_RX_BB1_gain = 0x77
initial_RX_BB2_gain = 0x33
initial_RX_BB3_gain = 0xFF

unit_name = "SNSP210128" # change this for different modules

evkplatform_type = "MB1"
custom_beambook_suffix = ""

do_lo_leakage_cal = False
ref_freq = 122.88e6
ref_is_diff = True
rfm_type = "BFM02003"

use_spi = True # set to False if EVK is to be controlled over USB, set to True if EVK is to be controlled over SPI

trx_cruijff = cruijff.Cruijff(unit_name = unit_name, evkplatform_type = evkplatform_type, ref_cfg = {'freq': ref_freq, 'is_diff': ref_is_diff}, rfm_type = rfm_type)

trx_accessible = trx_cruijff is not None and hasattr(trx_cruijff, 'chip_present_status')

if hasattr(trx_cruijff, 'regs') and trx_accessible:
    print('[EVK02001 Init RX]: Starting initialization now!!!')
   
    trx_cruijff.reset()
   
    if do_lo_leakage_cal:
        trx_cruijff.run_tx_lo_leakage_cal(custom_beambook_suffix = custom_beambook_suffix)
    
    trx_cruijff.rx.init()
    trx_cruijff.runRx(trx_frequency)
    #trx_cruijff.rx.set_beam(0x0a)
    trx_cruijff.regs.wrrd('trx_tx_on', 0x1fffff) # activate all RF paths
    print('Current state: ', trx_cruijff.state())
    
    #trx_cruijff.tx.bf.awv.bbp.set_selected_beambook(0)
    #print("Current TX beambook = " + str(trx_cruijff.tx.bf.awv.bbp.get_selected_beambook()))

    trx_cruijff.regs.wr('rx_gain_ctrl_bfrf', initial_RX_BF_RF_gain)
    trx_cruijff.regs.wr('rx_gain_ctrl_bb1', initial_RX_BB1_gain)
    trx_cruijff.regs.wr('rx_gain_ctrl_bb2', initial_RX_BB2_gain)
    trx_cruijff.regs.wr('rx_gain_ctrl_bb3', initial_RX_BB3_gain)
    trx_cruijff.regs.wr('trx_rx_on', 0x1fffff)
    trx_cruijff.regs.wr('agc_int_ctrl', 0x0)
    trx_cruijff.regs.wr('agc_int_en_ctrl', 0x0)
    trx_cruijff.regs.wr('agc_ext_ctrl', 0x5)
    print("[EVK02001 Init RX]: RX default gains set")
    
    print('AGC control:', trx_cruijff.regs.rd('agc_int_en_ctrl'))
    print('[EVK02001 Init RX]: Initialization of antenna array evaluation kit completed.')
    
    if use_spi:
        print("[EVK02001 Init RX]: You can now connect the SPI connector and use direct SPI control. The following SPI read error is generated by the USB FTDI chip which not cannot communicate over SPI anymore. This is intended.")
        print("[EVK02001 Init RX]: After switching up the (four upper-most) SW3 inputs, press Ctrl+C to continue.")
        
        trx_cruijff.evkplatform.drv.spioff()
        
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            print("\n[EVK02001 Init RX]: SPI set, terminating...")
            exit()
else:
    print("[EVK02001 Init RX]: Antenna array initialisation failed!")
